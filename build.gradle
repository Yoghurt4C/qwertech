import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        mavenCentral()
		maven {
			name = "gt"
			url = "https://gregtech.overminddl1.com/"
		}
		maven {
			name = "OC repo"
			url = "http://maven.cil.li/"
		}
		maven {
			name = "jitpack"
			url = "https://jitpack.io"
		}
		flatDir {
			dirs "libs"
		}
    }
    dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.gregoriust.gregtech:gregtech_1.7.10:SNAPSHOT:dev'
    }
}

apply plugin: 'idea'
idea{
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

repositories {
	mavenCentral()
	maven {
		name = "gt"
		url = "https://gregtech.overminddl1.com/"
	}
	maven {
		name = "OC repo"
		url = "http://maven.cil.li/"
	}
	maven {
		name = "jitpack"
		url = "https://jitpack.io"
	}
}

//allprojects {
//	tasks.withType(JavaCompile) {
//		options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
//	}
//}

apply plugin: 'forge'

version = "1.0.0-a.76"
group= "com.kbi.qwertech" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "qwertech"

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.bootClasspath = Jvm.current().getJre().getHomeDir().toString() +"/lib/rt.jar"
compileJava {
	options.encoding = "UTF-8"
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
}

dependencies {
	compileOnly fileTree(dir: 'libs', include: '*.jar')
	compile "com.gregoriust.gregtech:gregtech_1.7.10:SNAPSHOT:dev"
	
	runtime 'org.apache.commons:commons-math3:3.2' // Needed for dev opis because it doesn't know how to specify dependencies properly
	runtime 'org.jfree:jcommon:1.0.21'             // Needed for dev opis because it doesn't know how to specify dependencies properly
	runtime 'org.jfree:jfreechart:1.0.17'          // Needed for dev opis because it doesn't know how to specify dependencies properly
	runtime 'com.miglayout:miglayout-swing:4.2'    // Needed for dev opis because it doesn't know how to specify dependencies properly
	runtime 'net.sf.opencsv:opencsv:2.3'           // Needed for dev opis because it doesn't know how to specify dependencies properly
	runtime "io.netty-opis:Netty-opis:4.0.23"      // Needed for dev opis because it doesn't know how to specify dependencies properly
	runtime "mcp.mobius.opis:Opis:1.2.5_1.7.10:dev"
	compile "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10:dev"
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
	compileOnly "net.sengir.forestry:forestry_1.7.10:4.2.16.64:dev"
	compileOnly "com.mod-buildcraft:buildcraft:7.1.23:dev"
	compileOnly "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
	compileOnly "micdoodle8.mods:MicdoodleCore:1.7-3.0.12.504:Dev"
	compileOnly "micdoodle8.mods:GalacticraftCore:1.7-3.0.12.504:Dev"
	compileOnly "micdoodle8.mods:Galacticraft-Planets:1.7-3.0.12.504:Dev"
	compileOnly "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"
	compileOnly "enviromine:EnviroMine:1.3.124:deobf"
	compileOnly "vazkii.botania:Botania:r1.8-250:deobf"
	compileOnly "mods.railcraft:Railcraft_1.7.10:9.12.3.0:dev"
	compileOnly "twilightforest:twilightforest:1.7.10-2.3.8dev:dev"
	compileOnly "appeng:appliedenergistics2:rv3-beta-6:dev"
	compile/*Only*/ "cofh:CoFHLib:1.7.10R3.0.3:dev"
	compileOnly "applecore:AppleCore:1.7.10-3.1.1:deobf"
	compileOnly "li.cil.oc:OpenComputers:MC1.7.10-1.7.2.1204:dev"
	// This ComputerCraft thing is *SUCH* a hack, but ComputerCraft is... not right...  This only works because of CodeChickenCore Magic being included up above...
	compileOnly "dan200.computercraft:ComputerCraft:1.75"
	compileOnly "openblocks:OpenBlocks:1.7.10-1.6-1.7.10:deobf"
	compileOnly "openmods:OpenModsLib:1.7.10-0.10:deobf"
	compileOnly "ic2:IC2Classic:1.2.1.8:dev"
	compileOnly files("SpongeMixins-1.3.2-dev.jar")
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		exclude 'thumbs.db'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'thumbs.db'
    }
}

def filteredSourceDir = file("${buildDir}/filtered") 

sourceSets {
	ahem {
		java {
			srcDirs = [file("${buildDir}/sources/java")]
			//include 'com/kbi/qwertech/**'
			exclude 'com/kbi/qwertech/QwerTech.java'
		}
	}
}


// copy the main sources and filter any '$version' occurences. 
task processVersion (type: Copy, dependsOn: 'sourceMainJava') { 
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    outputs.upToDateWhen { false }
    from "build/sources/java/com/kbi/qwertech/QwerTech.java"
    into filteredSourceDir 
    expand 'version':project.version
} 

compileJava.dependsOn processVersion 

sourceSets {
    // This source set will contain all sources that we filter 
    filtered { 
        java { 
            srcDirs = [sourceSets.ahem.java, filteredSourceDir] 
        } 
    } 
} 

// tell the compileJava task to compile the filtered source 
compileJava.source = sourceSets.filtered.java 

task deobfJar(type: Jar, dependsOn: 'jar') {
    from "build/classes/main"
	from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'thumbs.db'
    }
    classifier "dev"
}

task sourceJar(type: Jar, dependsOn: 'sourceMainJava') {
    from "build/sources/java/com/kbi/qwertech/api"
    classifier "api"
}

artifacts {
    archives deobfJar
	archives sourceJar
}

idea { module { inheritOutputDirs = true } }

//##########################################################################################################
//########################################    Mixin  Part   ################################################
//##########################################################################################################
/**
* The name of your mixin config. Should match the name of mixin config file, which you placed in src/main/resources/
*/
def yourMixinConfig = 'mixins.qwertech.json'
/**
* The file with this name will be generated during build. Should math the remap value inside your src/main/resources/*yourMixinConfig*
*/
def refMapForYourConfig = 'mixins.qwertech.refmap.json'
/**
* Relative path to the new annotation processor. 
* You should download it (https://github.com/TimeConqueror/SpongeMixins/raw/master/mixin-0.8-SNAPSHOT.jar) and then place to the project folder. 
* You may also place it in the inner folders, only thing you should to do is to provide right RELATIVE path.
*/
def relativePathToMixinAP = 'mixin-0.8-SNAPSHOT.jar'

repositories {
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public'
    }
}

dependencies {
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + refMapForYourConfig

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

jar {
    from refMap
    manifest {
        attributes([
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                'MixinConfigs': yourMixinConfig,
                'FMLCorePluginContainsFMLMod': 'true',
                "ForceLoadAsMod": true
        ])
    }
}

reobf {
    addExtraSrgFile mixinSrg
}

afterEvaluate {
    def fixedRelPathToAP = relativePathToMixinAP
    if(fixedRelPathToAP.startsWith('./') || fixedRelPathToAP.startsWith('.\\')){
        fixedRelPathToAP = fixedRelPathToAP.substring(2)
    } else if(fixedRelPathToAP.startsWith('/') || fixedRelPathToAP.startsWith('\\')){
        fixedRelPathToAP = fixedRelPathToAP.substring(1)
    }

    tasks.compileJava {
        println "Path: " + projectDir.absolutePath
        options.compilerArgs += [
                // There's a bug in the AnnotationProcessor for 0.7.11 that will generate the annotations pointing to the parent class instead of subclass
                // resulting in the mixin not being applied.  This is fixed in 0.8, however 0.8 needs guava > 21.0, and minecraft ships with 17.0.
                // So as a hacky workaround... ship with 0.7.11, but use the AP from 0.8 for compiling
                "-processorpath", projectDir.absolutePath + '/' + fixedRelPathToAP,
                "-processor", "org.spongepowered.tools.obfuscation.MixinObfuscationProcessorInjection,org.spongepowered.tools.obfuscation.MixinObfuscationProcessorTargets",
                "-Xlint:-sunapi", "-XDenableSunApiLintControl", "-XDignore.symbol.file",
                "-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${refMap}"
        ]
    }
}

sourceSets {
    main {
    //    output.resourcesDir = output.classesDir
        ext.refMap = refMapForYourConfig
    }
}
